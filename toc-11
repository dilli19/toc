#include <stdio.h>
#include <stdbool.h>

#define MAX_STATES 10

// Function to compute ε-closure for a given state in the NFA
void epsilonClosure(int nfa[MAX_STATES][MAX_STATES], int numStates, int state, bool visited[]) {
    if (visited[state]) {
        return;
    }

    printf("%d ", state);
    visited[state] = true;

    // Traverse all states reachable from the current state via ε-transitions
    for (int i = 0; i < numStates; ++i) {
        if (nfa[state][i] == 1) {
            epsilonClosure(nfa, numStates, i, visited);
        }
    }
}

// Function to find ε-closure for all states in the NFA
void findAllEpsilonClosures(int nfa[MAX_STATES][MAX_STATES], int numStates) {
    printf("Epsilon Closures:\n");

    // Iterate through all states and compute ε-closure for each state
    for (int i = 0; i < numStates; ++i) {
        bool visited[MAX_STATES] = {false};
        printf("ε-Closure(%d): { ", i);
        epsilonClosure(nfa, numStates, i, visited);
        printf("}\n");
    }
}

int main() {
    int numStates;

    printf("Enter the number of states in the NFA: ");
    scanf("%d", &numStates);

    int nfa[MAX_STATES][MAX_STATES];

    printf("Enter the transition table for the NFA (1 for transition, 0 for no transition):\n");
    for (int i = 0; i < numStates; ++i) {
        for (int j = 0; j < numStates; ++j) {
            printf("NFA[%d][%d]: ", i, j);
            scanf("%d", &nfa[i][j]);
        }
    }

    findAllEpsilonClosures(nfa, numStates);

    return 0;
}
